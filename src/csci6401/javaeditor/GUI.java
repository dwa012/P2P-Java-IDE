/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package csci6401.javaeditor;

import csci6401.utils.Utilities;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sun.reflect.generics.tree.Tree;

/**
 *
 * @author daniel
 */
public class GUI extends javax.swing.JFrame {
    
    private P2PController peerController;
    private FileController fileController;
    private boolean connectedToPeers;
    private boolean locked;
    
    private int mark;
    
    private ImageIcon lockIcon;
    private ImageIcon unlockIcon;

    /**
     * Creates new form GUI
     */
    public GUI() {
       
        initComponents();
        this.setupLockIcons();
        
//        jEditorPane1.setEditorKit(new SyntaxKit("java"));
        this.setLocationRelativeTo(null);
        jsyntaxpane.DefaultSyntaxKit.initKit();
        javaEditorPane.setContentType("text/java");
//        jEditorPane1.setEditable(false);
        
        fileController = new FileController();
        
        mark = 0;
        connectedToPeers = false;
        
        outputPanel.setVisible(false);
        
        javaEditorPane.setBackground(Color.WHITE);
        
        locked = false;
        lockButton.setIcon(unlockIcon);
        lockButton.setToolTipText("Click to lock the file");
        lockButton.setEnabled(false);
//        
        disconnectMenuItem.setEnabled(false);
//        try{
//        Utilities.readConfiguratoinFile();
//        }catch(FileNotFoundException ex){
//            
//        }
    }
    
    JEditorPane getEditorPane(){
        return this.javaEditorPane;
    }
    
    private void setupLockIcons(){
       lockIcon = createImageIcon("resource/lock.png", "Lock Icon");
       unlockIcon = createImageIcon("resource/unlock.png", "Lock Icon");
    }
    
    protected ImageIcon createImageIcon(String path,
            String description) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorScrollPane = new javax.swing.JScrollPane();
        javaEditorPane = new javax.swing.JEditorPane();
        outputPanel = new javax.swing.JPanel();
        outputScrollPane = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        compileButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        lockButton = new javax.swing.JButton();
        outputToggle = new javax.swing.JToggleButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        compileMenuItem = new javax.swing.JMenuItem();
        connectToMenuItem = new javax.swing.JMenuItem();
        disconnectMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javaEditorPane.setBackground(new java.awt.Color(254, 254, 254));
        javaEditorPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        editorScrollPane.setViewportView(javaEditorPane);

        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Courier New", 0, 12));
        outputTextArea.setRows(5);
        outputScrollPane.setViewportView(outputTextArea);

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/csci6401/javaeditor/resource/save.png"))); // NOI18N
        jButton1.setToolTipText("Save (Ctrl+s)");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        compileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/csci6401/javaeditor/resource/compile.png"))); // NOI18N
        compileButton.setToolTipText("Compile (F5)");
        compileButton.setFocusable(false);
        compileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        compileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        compileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(compileButton);
        jToolBar1.add(jSeparator1);

        lockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/csci6401/javaeditor/resource/unlock.png"))); // NOI18N
        lockButton.setToolTipText("Lock Editor");
        lockButton.setFocusable(false);
        lockButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lockButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(lockButton);

        outputToggle.setText("Toggle Output");
        outputToggle.setFocusable(false);
        outputToggle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        outputToggle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        outputToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputToggleActionPerformed(evt);
            }
        });
        jToolBar1.add(outputToggle);

        fileMenu.setText("File");

        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        compileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        compileMenuItem.setText("Compile");
        compileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(compileMenuItem);

        connectToMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        connectToMenuItem.setText("Connect To Other Editors");
        connectToMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectToMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connectToMenuItem);

        disconnectMenuItem.setText("Disconnect from other editors");
        disconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(disconnectMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java File", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            try {
                File file = chooser.getSelectedFile();
                fileController.setFilePath(file.getAbsolutePath());
                javaEditorPane.setText(fileController.readFile());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void connectToMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectToMenuItemActionPerformed
        Object[] options = {"Select File",
            "Cancel"};
        
        int n = JOptionPane.showOptionDialog(this,
                "Please select the configuration file to use",
                "Configuration File Selection",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                options,
                options[1]);
        
        if(n == JOptionPane.YES_OPTION){
            try {
                String[][]configuration = Utilities.readConfiguratoinFile();
                peerController = new P2PController(this,configuration);
                connectedToPeers = true;
                
                lockButton.setEnabled(true);
                connectToMenuItem.setEnabled(false);
                disconnectMenuItem.setEnabled(true);
                
                javaEditorPane.setEditable(false);
                
                if(fileController.fileOpen()){
                    fileController.writeToFile(javaEditorPane.getText());
                }
                else{
                    saveMenuItemActionPerformed(null);
                }
                    
            } catch (IOException ex) {
                System.err.println("ERROR: " + ex.getMessage());
            }
        }
            
    }//GEN-LAST:event_connectToMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if(fileController.fileOpen()){
            try {
                fileController.writeToFile(javaEditorPane.getText());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JFileChooser chooser = new JFileChooser();
            FileFilter filter = new FileNameExtensionFilter("Java File", "java");
            chooser.addChoosableFileFilter(filter);
            int returnVal = chooser.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = chooser.getSelectedFile();
                    fileController.setFilePath(file.getAbsolutePath());
                    fileController.writeToFile(javaEditorPane.getText());
                } catch (FileNotFoundException ex) {
//                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java File", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = chooser.getSelectedFile();
                fileController.setFilePath(file.getAbsolutePath());
                fileController.writeToFile(javaEditorPane.getText());
            } catch (FileNotFoundException ex) {
//                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void compileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuItemActionPerformed
        if(fileController.fileOpen()){
            try {
                fileController.writeToFile(javaEditorPane.getText());
                String output = SystemCalls.compileJavaFile(fileController.getFilePath());
//                new CompilerOutputFrame(output).setVisible(true);
                
                outputTextArea.setText(output);
                outputPanel.setVisible(true);
                outputToggle.setSelected(true);
            } catch (IOException ex) {
//                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_compileMenuItemActionPerformed

    private void lockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lockButtonActionPerformed
        if (!locked) {
             lockButton.setIcon(lockIcon);
            lockButton.setToolTipText("Click to unlock the file");

            peerController.requestP();

            javaEditorPane.setEditable(true);
            javaEditorPane.setCaretPosition(javaEditorPane.getDocument().getLength());

            locked = true;
        } else {
            
            lockButton.setIcon(unlockIcon);
            lockButton.setToolTipText("Click to lock the file");
           
            
            peerController.sendData(javaEditorPane.getText());
            
            peerController.requestV();            

            javaEditorPane.setEditable(false);

            locked = false;
        }
    }//GEN-LAST:event_lockButtonActionPerformed

    private void outputToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputToggleActionPerformed
      if(outputToggle.isSelected()){
          outputPanel.setVisible(true);
      }
      else{
          outputPanel.setVisible(false);
      }
    }//GEN-LAST:event_outputToggleActionPerformed

    private void compileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileButtonActionPerformed
        this.compileMenuItemActionPerformed(null);
    }//GEN-LAST:event_compileButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.saveMenuItemActionPerformed(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void disconnectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectMenuItemActionPerformed
        peerController.close();
        disconnectMenuItem.setEnabled(false);
        connectToMenuItem.setEnabled(true);
        javaEditorPane.setEditable(true);
        lockButton.setEnabled(false);
    }//GEN-LAST:event_disconnectMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
//            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());

//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compileButton;
    private javax.swing.JMenuItem compileMenuItem;
    private javax.swing.JMenuItem connectToMenuItem;
    private javax.swing.JMenuItem disconnectMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JEditorPane javaEditorPane;
    private javax.swing.JButton lockButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JToggleButton outputToggle;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
